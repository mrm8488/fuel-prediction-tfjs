{"id":"lVqk","dependencies":[{"name":"/home/manu/Escritorio/tfjs_projects/fuel-prediction-tfjs/package.json","includedInParent":true,"mtime":1570206157719},{"name":"/home/manu/Escritorio/tfjs_projects/fuel-prediction-tfjs/node_modules/mathjs/package.json","includedInParent":true,"mtime":1570206157339}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.mapDocs=void 0;var e={name:\"map\",category:\"Matrix\",syntax:[\"map(x, callback)\"],description:\"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.\",examples:[\"map([1, 2, 3], square)\"],seealso:[\"filter\",\"forEach\"]};exports.mapDocs=e;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":0}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":13}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":20}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":35}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":43}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":56}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":57}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":64}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":68}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":76}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":89}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":91}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"mapDocs","original":{"line":1,"column":11},"generated":{"line":1,"column":95}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":21},"generated":{"line":1,"column":97}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"name","original":{"line":2,"column":2},"generated":{"line":1,"column":98}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":2,"column":8},"generated":{"line":1,"column":103}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"category","original":{"line":3,"column":2},"generated":{"line":1,"column":109}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":3,"column":12},"generated":{"line":1,"column":118}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"syntax","original":{"line":4,"column":2},"generated":{"line":1,"column":127}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":4,"column":10},"generated":{"line":1,"column":134}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":4,"column":11},"generated":{"line":1,"column":135}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"description","original":{"line":5,"column":2},"generated":{"line":1,"column":155}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":5,"column":15},"generated":{"line":1,"column":167}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"examples","original":{"line":6,"column":2},"generated":{"line":1,"column":284}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":6,"column":12},"generated":{"line":1,"column":293}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":6,"column":13},"generated":{"line":1,"column":294}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","name":"seealso","original":{"line":7,"column":2},"generated":{"line":1,"column":320}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":7,"column":11},"generated":{"line":1,"column":328}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":7,"column":12},"generated":{"line":1,"column":329}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":7,"column":22},"generated":{"line":1,"column":338}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":350}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":358}},{"source":"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7},"generated":{"line":1,"column":366}}],"sources":{"node_modules/mathjs/es/expression/embeddedDocs/function/matrix/map.js":"export var mapDocs = {\n  name: 'map',\n  category: 'Matrix',\n  syntax: ['map(x, callback)'],\n  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  examples: ['map([1, 2, 3], square)'],\n  seealso: ['filter', 'forEach']\n};"},"lineCount":null}},"error":null,"hash":"8bc31af4a07ad009013d3a146b2634bc","cacheData":{"env":{}}}